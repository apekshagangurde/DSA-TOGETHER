

/*Given a string of S as input. Your task is to write a program to delete the minimum number of characters from the string so that the resultant string is a palindrome.
Note: The order of characters in the string should be maintained.

Example 1:

Input: 
S = "aebcbda"
Output: 
2
Explanation: 
Remove characters 'e' and 'd'. 
*/
class Solution{ 
public: 
    // Longest Palindromic Subsequence 
    int minimumNumberOfDeletions(string s) {  
        int n = s.size(); 
        string temp = s; 
        reverse(temp.begin(), temp.end()); 
         
        vector<int> prev(n + 1), curr(n + 1); 
        for(int i = 1; i <= n; i++) { 
            for(int j = 1; j <= n; j++) { 
                if(s[i - 1] == temp[j - 1]) 
                    curr[j] = 1 + prev[j - 1]; 
                else 
                    curr[j] = max(prev[j], curr[j - 1]); 
            } 
             
            prev = curr; 
        } 
         
        return n - prev[n]; 
    }  
};
