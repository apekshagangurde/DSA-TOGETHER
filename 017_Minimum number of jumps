class Solution {
public:
    int minJumps(int arr[], int n) {
        if (n <= 1)
            return 0;

        int jumps = 0; // Number of jumps required
        int current_max = 0; // Maximum index that can be reached from the current position
        int farthest = 0; // Maximum index that can be reached with the current number of jumps

        for (int i = 0; i < n - 1; i++) {
            farthest = std::max(farthest, i + arr[i]);

            if (i == current_max) {
                jumps++;
                current_max = farthest;
            }
        }

        if (current_max >= n - 1)
            return jumps;
        else
            return -1; // If we cannot reach the end
    }
};
